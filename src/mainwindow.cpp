//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \file      mainwindow.cpp
/// \brief     Implementation of Main Window of application
///
/// \author    Janie
/// \version   1.0.0.0
///
/// \note
///
/// Version      When        Who         Remarks
/// ===========================================================================================================================
///
/// 0.0.0.1      14Sep2017   Janie       First creation
/// 1.0.0.0      25Sep2017   Janie       First release
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <QDesktopWidget>
#include <QMessageBox>

#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "comdef.h"
#include "decodingboard.h"
#include "holematrix.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \fn         MainWindow::MainWindow
/// \brief      Constructor (with default values for arguments, played role as default constructor as well as
///             parameterized constructor)
///             - Init data member (allocate memory and set default values)
///             - Set default window size and position
///             - Start a new game
///
/// \param      parent
/// \brief      Parent window
/// \default    0 (no parent)
///
/// \return     none
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    SetWindowSize();
    SetWindowPos();

    StartNewGame();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \fn     MainWindow::~MainWindow
/// \brief  Destructor
///         - Cleanup activities
///
/// \param  none
///
/// \return none
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MainWindow::~MainWindow()
{
    delete ui;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \fn     MainWindow::GetMasterMindGame
/// \brief  Get Master Mind Game
///
/// \param  none
///
/// \return const shared_ptr<MasterMindGame>&
/// \brief  master mind game object
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const shared_ptr<MasterMindGame>& MainWindow::GetMasterMindGame(){ return master_mind_game_; }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \fn     MainWindow::on_actionNewGame_triggered
/// \brief  Start a new game when New game menu button was pressed
///
/// \param  none
///
/// \return void
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MainWindow::on_actionNewGame_triggered(){ StartNewGame(); }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \fn     MainWindow::on_actionExit_triggered
/// \brief  Exit application when Exit menu button was pressed
///
/// \param  none
///
/// \return void
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MainWindow::on_actionExit_triggered(){ QApplication::quit(); }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \fn     MainWindow::on_actionAbout_triggered
/// \brief  Display application info when About menu button was pressed
///
/// \param  none
///
/// \return void
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MainWindow::on_actionAbout_triggered()
{
    QString msg;

    msg.append(comdef::info::about::kAppName);
    msg.append(comdef::info::about::kAppVersion);
    msg.append(comdef::info::about::kAppAuthor);
    msg.append(comdef::info::about::kAppCopyright);

    QMessageBox::information(nullptr,
                             comdef::info::kAppName,
                             msg,
                             QMessageBox::Ok,
                             QMessageBox::Icon::Information);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \fn     MainWindow::StartNewGame
/// \brief  Start a new game
///
/// \param  none
///
/// \return void
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MainWindow::StartNewGame()
{
    try
    {
        master_mind_game_.reset(new MasterMindGame);

        master_mind_game_->GetDecodingBoard()->Draw();
    }
    catch(const std::exception& e)
    {
        QString msg{"%1\n\n%2"};

        msg.arg(comdef::error::kErr001).arg(e.what());

        QMessageBox::information(nullptr, comdef::info::kAppName, msg, QMessageBox::Retry);
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \fn     MainWindow::SetWindowSize
/// \brief  Set size of window
///
/// \param  none
///
/// \return void
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MainWindow::SetWindowSize()
{
    setFixedSize(comdef::mainwindow::kDefWindowWidth,
                 comdef::mainwindow::kDefWindowHeight);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \fn     MainWindow::SetWindowPos
/// \brief  Set position of window
///
/// \param  none
///
/// \return void
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MainWindow::SetWindowPos()
{
    QSize desktop_size = QApplication::desktop()->size();
    QSize main_window_size = size();

    int x = (desktop_size.width() - main_window_size.width()) / 2;
    int y = (desktop_size.height() - main_window_size.height()) / 2;

    move(x, y);
}
